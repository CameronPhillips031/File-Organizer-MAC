 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/cratesai_pro/mashups/suggestions.py b/src/cratesai_pro/mashups/suggestions.py
new file mode 100644
index 0000000000000000000000000000000000000000..456d26e93df8ef1a029b7d0aadfad25bd7bdaa50
--- /dev/null
+++ b/src/cratesai_pro/mashups/suggestions.py
@@ -0,0 +1,50 @@
+"""Generate mashup suggestions from analyzed tracks."""
+from __future__ import annotations
+
+from dataclasses import dataclass
+from typing import Iterable, List
+
+from ..models import TrackAnalysis
+
+
+@dataclass(slots=True)
+class MashupSuggestion:
+    base_track: TrackAnalysis
+    matches: List[TrackAnalysis]
+
+
+def suggest_mashups(tracks: Iterable[TrackAnalysis]) -> List[MashupSuggestion]:
+    track_list = list(tracks)
+    suggestions: List[MashupSuggestion] = []
+    for track in track_list:
+        matches = [
+            candidate
+            for candidate in track_list
+            if candidate.source_path != track.source_path and _is_compatible(track, candidate)
+        ]
+        if matches:
+            suggestions.append(MashupSuggestion(base_track=track, matches=matches))
+    return suggestions
+
+
+def _is_compatible(base: TrackAnalysis, other: TrackAnalysis) -> bool:
+    if not base.camelot or not other.camelot:
+        return False
+    try:
+        base_num = int(base.camelot[:-1])
+        base_mode = base.camelot[-1]
+        other_num = int(other.camelot[:-1])
+        other_mode = other.camelot[-1]
+    except ValueError:
+        return False
+
+    same_key = base_num == other_num and base_mode == other_mode
+    adjacent = base_mode == other_mode and abs(base_num - other_num) in {1, 11}
+    relative = base_num == other_num and base_mode != other_mode
+    tempo_close = (
+        abs(base.bpm - other.bpm) <= 2
+        or abs(base.bpm - other.bpm * 2) <= 2
+        or abs(base.bpm * 2 - other.bpm) <= 2
+    )
+    energy_close = abs(base.energy - other.energy) <= 2
+    return (same_key or adjacent or relative) and tempo_close and energy_close
 
EOF
)

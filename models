 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/cratesai_pro/models.py b/src/cratesai_pro/models.py
new file mode 100644
index 0000000000000000000000000000000000000000..37e37fae0089da73a1b65a9fa0ef57f669c034f5
--- /dev/null
+++ b/src/cratesai_pro/models.py
@@ -0,0 +1,57 @@
+"""Data models used throughout CratesAI Pro."""
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from typing import Dict, List, Optional
+
+
+@dataclass(slots=True)
+class CuePoint:
+    """Represents a cue point discovered during analysis."""
+
+    label: str
+    time_seconds: float
+
+
+@dataclass(slots=True)
+class TrackAnalysis:
+    """Normalized results for a single analyzed track."""
+
+    source_path: Path
+    title: str
+    artist: str
+    album: Optional[str]
+    genre: Optional[str]
+    bpm: float
+    key: str
+    camelot: str
+    energy: float
+    duration: float
+    cue_points: List[CuePoint] = field(default_factory=list)
+
+    @property
+    def display_name(self) -> str:
+        """Return a human readable representation."""
+
+        return f"{self.artist} - {self.title}" if self.artist else self.title
+
+    def to_dict(self) -> Dict[str, object]:
+        """Serialize the analysis to a dictionary for table/JSON export."""
+
+        return {
+            "path": str(self.source_path),
+            "title": self.title,
+            "artist": self.artist,
+            "album": self.album,
+            "genre": self.genre,
+            "bpm": round(self.bpm, 2),
+            "key": self.key,
+            "camelot": self.camelot,
+            "energy": round(self.energy, 2),
+            "duration": round(self.duration, 2),
+            "cue_points": [
+                {"label": cue.label, "time_seconds": round(cue.time_seconds, 2)}
+                for cue in self.cue_points
+            ],
+        }
 
EOF
)
